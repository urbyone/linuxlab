name: Deploy My Linux VMs Using Terraform and Ansible
on:
  push:
    branches:
      - main
    paths:
      - "infra/part5/**"
  workflow_dispatch:

jobs:
  LinuxLab-Part5:
    runs-on: ubuntu-latest

    env:
      TF_VAR_ssh_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
      ANSIBLE_HOST_KEY_CHECKING: "false"
      working: ./infra/part5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Azure Connection
        run: |
          az account show

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Parse Backend Config
        id: backend_config
        run: |
          echo '${{ secrets.TF_BACKEND_CONFIG }}' > backend_config.json
          echo "RESOURCE_GROUP=$(jq -r .resource_group_name backend_config.json)" >> $GITHUB_OUTPUT
          echo "STORAGE_ACCOUNT=$(jq -r .storage_account_name backend_config.json)" >> $GITHUB_OUTPUT
          echo "CONTAINER=$(jq -r .container_name backend_config.json)" >> $GITHUB_OUTPUT
          echo "KEY=$(jq -r .key backend_config.json)" >> $GITHUB_OUTPUT
          echo "SUBSCRIPTION_ID=$(jq -r .subscription_id backend_config.json)" >> $GITHUB_OUTPUT
          echo "TENANT_ID=$(jq -r .tenant_id backend_config.json)" >> $GITHUB_OUTPUT
      
      - name: Backend Outputs
        run: |
          echo "RESOURCE_GROUP: ${{ steps.backend_config.outputs.RESOURCE_GROUP }}"
          echo "STORAGE_ACCOUNT: ${{ steps.backend_config.outputs.STORAGE_ACCOUNT }}"
          echo "CONTAINER: ${{ steps.backend_config.outputs.CONTAINER }}"
          echo "KEY: ${{ steps.backend_config.outputs.KEY }}"
          echo "SUBSCRIPTION_ID: ${{ steps.backend_config.outputs.SUBSCRIPTION_ID }}"
          echo "TENANT_ID: ${{ steps.backend_config.outputs.TENANT_ID }}"

      - name: Generate backend.tf file
        run: |
          sed -i "s/rsg_value/${{steps.backend_config.outputs.RESOURCE_GROUP}}/g" ./backend.txt
          sed -i "s/sa_value/${{steps.backend_config.outputs.STORAGE_ACCOUNT}}/g" ./backend.txt
          sed -i "s/cont_value/${{steps.backend_config.outputs.CONTAINER}}/g" ./backend.txt
          sed -i "s/key_value/${{steps.backend_config.outputs.KEY}}/g" ./backend.txt
          sed -i "s/sub_value/${{steps.backend_config.outputs.SUBSCRIPTION_ID}}/g" ./backend.txt
          sed -i "s/ten_value/${{steps.backend_config.outputs.TENANT_ID}}/g" ./backend.txt
          cp backend.txt backend.tf     
        working-directory: ${{ env.working }}

      - name: Display backend.tf contents
        run: cat backend.tf
        working-directory: ${{ env.working }}
      
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.working }}

      - name: Terraform Format
        run: terraform fmt
        working-directory: ${{ env.working }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.working }}

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ${{ env.working }}

      - name: Terraform Apply
        id: terraform_apply
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.working }}

      - name: Terraform Output
        id: terraform_output
        run: |
          echo "rsgname=$(terraform output -raw rsgname)" >> $GITHUB_OUTPUT
          echo "vm_ip=$(terraform output -raw vm_ip_address)" >> $GITHUB_OUTPUT
          echo "storageaccount=$(terraform output -raw storageaccount)" >> $GITHUB_OUTPUT
          echo "container=$(terraform output -raw containername)" >> $GITHUB_OUTPUT
          echo "share=$(terraform output -raw sharename)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.working }}

      - name: Create the VM Config Script
        run: |
          cp connectionscript.txt connectionscript.sh
          key=$(az storage account keys list --resource-group ${{steps.terraform_output.outputs.rsgname}} --account-name ${{steps.terraform_output.outputs.storageaccount}} --query '[0].value' --output tsv)
          sed -i "s/insertstorageaccountnamehere/${{steps.terraform_output.outputs.storageaccount}}/g" ./connectionscript.sh && sed -i "s/insertsharenamehere/${{steps.terraform_output.outputs.share}}/g" ./connectionscript.sh 
          key_trim=$(echo $key | tr -d '\r')
          sed -i "s|"insertstoragekeyhere"|${key_trim}|g" connectionscript.sh
        working-directory: ${{ env.working }}

      - name: Get Private SSH Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.TF_VAR_ssh_private_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa

      - name: Add public SSH key to known_hosts
        run: |
            echo "${{ env.TF_VAR_ssh_key }}" >> ~/.ssh/authorized_keys
            chmod 600 ~/.ssh/authorized_keys
            cat ~/.ssh/authorized_keys
            ssh-keyscan -H ${{ steps.terraform_output.outputs.vm_ip }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: ssh -v adminuser@${{ steps.terraform_output.outputs.vm_ip }} "echo Connection successful"

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Create Ansible Inventory
        run: |
          echo "[web]" > hosts.ini
          echo "${{ steps.terraform_output.outputs.vm_ip }} ansible_user=adminuser ansible_ssh_private_key_file=~/.ssh/id_rsa" >> hosts.ini
          echo "Inventory file created:"
          cat hosts.ini
        working-directory: ${{ env.working }}

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i hosts.ini ansible.yml
        working-directory: ${{ env.working }}